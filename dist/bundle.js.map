{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/board/greenBackdrop.js","webpack:///./src/bombs/bomb.js","webpack:///./src/characters/moveMap.js","webpack:///./src/characters/player1.js","webpack:///./src/characters/player2.js","webpack:///./src/main.js","webpack:///./src/powerUps/powerUp.js","webpack:///./src/powerUps/shield.js","webpack:///./src/sounds/sound.js","webpack:///./src/traps/spikes.js","webpack:///./src/util/characterUtil.js","webpack:///./src/util/gameUtil.js","webpack:///./src/util/moveUtil.js","webpack:///./src/util/wallUtil.js","webpack:///./src/walls/breakableWalls.js","webpack:///./src/walls/staticWalls.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;AACK;AACH;AACI;AACR;;AAEzD;AACA;;AAEO;AACP;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA,IAAI,6DAAc;AAClB;AACA,IAAI,oEAAa;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA,UAAU,0DAAW,QAAQ,0DAAW;AACxC,QAAQ,iEAAU;AAClB;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA,yD;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,UAAU,4DAAU,oBAAoB,uEAAa;AACrD,UAAU,0DAAS,oBAAoB,qEAAY;AACnD,UAAU,sDAAQ,oBAAoB,kEAAY;AAClD;AACA;;AAEA;AACA,WAAW,gBAAgB;AAC3B;;AAEA;AACA,mBAAmB,mBAAmB;AACtC,qC;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxHA;AAAA;AAAuD;;AAExC;AACf,SAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;AAEA;AACA,C;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACd;AACd;AACY;AAC4B;AAC/B;AAMf;;AAEX;AACf;AACA;AACA;AACA,4CAA4C,wDAAO;AACnD;AACA;;AAEA;AACA,yBAAyB,sEAAe;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,0EAAmB;AACvB;AACA;AACA;AACA;;AAEA;AACA,QAAQ,iEAAO;AACf,MAAM,2DAAY;AAClB;AACA;AACA;AACA,QAAQ,+DAAM;AACd,MAAM,0DAAW;AACjB;AACA;AACA,K;AACA,wBAAwB,qDAAS,WAAW,qDAAS;AACrD;AACA;AACA,QAAQ,sDAAU,eAAe,sDAAU;AAC3C,MAAM,qEAAc;AACpB;;AAEA,QAAQ,4DAAM;AACd,MAAM,yDAAU;AAChB,MAAM,qEAAc;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gDAAI;AACZ;AACA;AACA,IAAI,0EAAmB;AACvB,G;AACA,C;;;;;;;;;;;;AC5GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACd;AACd;AACY;AAC4B;AAC/B;AAMf;;AAEX;AACf;AACA;AACA;AACA,4CAA4C,wDAAO;AACnD;AACA;;AAEA;AACA,yBAAyB,sEAAe;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,0EAAmB;AACvB;AACA;AACA;;AAEA;AACA,QAAQ,iEAAO;AACf,MAAM,2DAAY;AAClB;AACA;AACA;AACA,QAAQ,+DAAM;AACd,MAAM,0DAAW;AACjB;AACA;AACA,K;AACA,wBAAwB,qDAAS,WAAW,qDAAS;AACrD;AACA;AACA,QAAQ,sDAAU,eAAe,sDAAU;AAC3C,MAAM,qEAAc;AACpB;AACA,QAAQ,4DAAM;AACd,MAAM,yDAAU;AAChB,MAAM,qEAAc;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gDAAI;AACZ;AACA;AACA,IAAI,0EAAmB;AACvB,G;AACA,C;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAoG;AAC9C;;AAEtD;AACA,qBAAqB,0EAAc;AACnC,EAAE,iEAAU;;AAEZ;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,kEAAmB;;AAEhC;;AAEA,KAAK;AACL;AACA;AACA,aAAa,kEAAmB;;AAEhC;;AAEA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,WAAW,+DAAgB;AAC3B;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAc;AAClB;AACA;AACA;AACA,GAAG;AACH,CAAC,E;;;;;;;;;;;;AC1DD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;;AAE9D;;AAEO;;AAEP;AACA;AACA,+BAA+B,6DAAc;AAC7C;AACA,+BAA+B,6DAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,iEAAU;;AAEd;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;;AAE9D;;AAEO;;AAEP;AACA;AACA,+BAA+B,6DAAc;AAC7C;AACA,+BAA+B,6DAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,iEAAU;;AAEd;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;AC7CA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;;AAE9D;;AAEO;;AAEP;AACA;AACA,+BAA+B,6DAAc;AAC7C;AACA,+BAA+B,6DAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,iEAAU;;AAEd;AACA,GAAG;AACH;;AAEO;AACP;AACA;;;;;;;;;;;;;;AC5CA;AAAA;AAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;;;;;;ACjED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACoB;AACN;AACM;AACP;AACF;AACH;AACA;AACA;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,kBAAkB,2DAAO;AACzB;AACA;AACA,GAAG;AACH,kBAAkB,2DAAO;AACzB;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,2DAAO;AACvB,gBAAgB,2DAAO;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE,oEAAkB;AACpB,EAAE,kEAAc;AAChB,EAAE,qEAAiB;AACnB,EAAE,oEAAU;AACZ,EAAE,kEAAS;AACX,EAAE,+DAAS;AACX;AACA;AACA;;AAEO;AACP,uBAAuB,qDAAK;AAC5B,oBAAoB,qDAAK;AACzB,qBAAqB,qDAAK;AAC1B,mBAAmB,qDAAK;AACxB,sBAAsB,qDAAK;AAC3B,cAAc,qDAAK;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA,iBAAiB,mBAAmB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACU;;;AAG7C;AACP,MAAM,sDAAO,kBAAkB,sDAAO,OAAO,sDAAO;AACpD,MAAM,sDAAO,kBAAkB,sDAAO,OAAO,sDAAO;AACpD;;AAEO;AACP;AACA;;AAEA;AACA,SAAS,sDAAY,QAAQ,sDAAY;AACzC,OAAO,sDAAO,gBAAgB,sDAAO;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,sDAAO;AACT;;AAEO;AACP;AACA;;AAEA;AACA,SAAS,sDAAY,QAAQ,sDAAY;AACzC,OAAO,sDAAO,IAAI,sDAAO,gBAAgB,sDAAO;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,sDAAO;AACT,C;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;;AAErD,uBAAuB;AACvB,yBAAyB;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,K;AACA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,oCAAoC,wEAAiB;AACrD;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;;;;;;;;;;;;;;AC3IA;AAAA;AAA6D;;AAE9C;AACf;AACA;AACA;AACA;;AAEA,2BAA2B,gFAAyB;AACpD;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;;;;;;AChBA;AAAA;AAI0B;;AAEX;AACf;AACA;AACA;AACA;;AAEA,wBAAwB,gFAAyB;AACjD,YAAY,8EAAuB;AACnC,YAAY,sEAAe;;AAE3B;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA,GAAG;AACH,C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","export default () => {\n  const canvas = document.querySelector('#green-backdrop');\n  if (canvas.getContext) {\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#3B8314';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n  // one time alert in case browser does not support canvas\n    alert(\n      'Sorry. This games only operates' +\n      'on browsers that support HTML canvas.'\n    );\n  }\n}\n\n","import { staticWalls, removeWall } from '../util/wallUtil';\nimport { powerUpPos, renderPowerUp } from '../powerUps/powerUp';\nimport { shieldPos, renderShield } from '../powerUps/shield';\nimport { checkGameOver, explosionSound } from '../util/gameUtil';\nimport { renderSpikes, spikePos } from '../traps/spikes';\n\nconst liveBombs = {};\nconst liveAttack = {};\n\nexport class Bomb {\n  constructor(props) {\n    Object.assign(this, props);\n    const { ctx, bombImg, x, y, } = this;\n    ctx.drawImage(bombImg, x, y);\n    this.explode = this.explode.bind(this);\n    this.bombIntervalId = setTimeout(() => this.explode(true), 1500);\n    \n    liveBombs[x] ? \n    liveBombs[x][y] = this :\n    liveBombs[x] = { [y]: this };\n  }\n\n  explode(initialBomb) {\n    delete liveBombs[this.x][this.y]\n    const spread = this.getSpread();\n    this.detonateProximalBombs(spread);\n    explosionSound.play();\n    this.spreadAttack(spread);\n    checkGameOver(spread);\n    setTimeout(() => this.coolDown(spread), 300);\n  }\n  \n  getSpread() {\n    const attack = this.getAttack();\n    const spread = [];\n    let x, y;\n    for (let i = 0; i < attack.length; i++) {\n      [x, y] = attack[i];\n      if (staticWalls[x] && !staticWalls[x][y]) {\n        removeWall(x, y);\n        spread.push([x, y]);\n      } else {\n        // skip all attack going direction blocked by static wall\n        if ((i + 1) % (attack.length / 4) !== 0) i++;\n      }\n    }\n\n    spread.push([this.x, this.y]);\n    return spread;\n  }\n  \n  spreadAttack(spread) {\n    let pos;\n    for (let i = 0; i < spread.length; i++) {\n      pos = spread[i];\n      this.addToLiveAttack(pos);\n      this.ctx.drawImage(this.attackImg, pos[0], pos[1]);    \n    }\n  }\n  \n  coolDown(spread) {\n    let pos;\n    this.removeFromLiveAttack(spread);\n    for (let i = 0; i < spread.length; i++) {\n      pos = spread[i];\n      this.ctx.fillStyle = '#3B8314';\n      this.ctx.fillRect(pos[0], pos[1], 50, 50);\n      if (powerUpPos[pos[0]] == pos[1]) renderPowerUp(pos[0], pos[1]);\n      if (shieldPos[pos[0]] == pos[1]) renderShield(pos[0], pos[1]);\n      if (spikePos[pos[0]] == pos[1]) renderSpikes(pos[0], pos[1]);\n    }\n  };\n  \n  getAttack() {\n    const {x, y, bombPower} = this;\n    let attack = [];\n  \n    // intentional so array is sorted based off of direction of attack\n    for (let i = 1; i < bombPower + 1; i++) {\n      attack.push([x - (50 * i), y]); \n    }\n    for (let i = 1; i < bombPower + 1; i++) {\n      attack.push([x + (50 * i), y]);\n    }\n    for (let i = 1; i < bombPower + 1; i++) {\n      attack.push([x, y - (50 * i)]);\n    }\n    for (let i = 1; i < bombPower + 1; i++) {\n      attack.push([x, y + (50 * i)]);\n    }\n  \n    return attack;\n  };\n  \n  addToLiveAttack(pos) {\n    let [x, y] = pos;\n    liveAttack[x] ? \n    liveAttack[x][y] = true :\n    liveAttack[x] = { [y]: true };\n  };\n  \n  removeFromLiveAttack(spread) {\n    let x, y;\n    for (let i = 0; i < spread.length; i++) {\n      [x, y] = [spread[i][0], spread[i][1]];\n      liveAttack[x][y] = false;\n    }\n  };\n\n  detonateProximalBombs(spread) {\n    let x, y, bomb;\n    for (let i = 0; i < spread.length; i++) {\n      [x, y] = spread[i];\n      if (liveBombs[x] && liveBombs[x][y]) {\n        bomb = liveBombs[x][y]\n        clearInterval(bomb.bombIntervalId)\n        bomb.explode(false);\n      }\n    }\n  }\n}\n\nexport { liveBombs, liveAttack }; ","import { updatePossibleMoves } from \"../util/moveUtil\";\n\nexport default (e, player) => {\n  const { left, right, back, front } = player;\n  if (e.keyCode === 81 && player.id === 1) return player.dropBomb();\n  if (e.keyCode === 79 && player.id === 2) return player.dropBomb();\n  if (!player.possibleMoves.includes(e.keyCode)) return;\n  switch(e.keyCode) {\n    case 65:\n      player.readyRender(left, -50, 0);\n      player.direction = 'W';\n      break;\n    case 87:\n      player.readyRender(back, 0, -50);\n      player.direction = 'N';\n      break;\n    case 68:\n      player.readyRender(right, 50, 0);\n      player.direction = 'E';\n      break;\n    case 83:\n      player.readyRender(front, 0, 50);\n      player.direction = 'S';\n      break;\n    case 74:\n      player.readyRender(left, -50, 0);\n      player.direction = 'W';\n      break;\n    case 73:\n      player.readyRender(back, 0, -50);\n      player.direction = 'N';\n      break;\n    case 76:\n      player.readyRender(right, 50, 0);\n      player.direction = 'E';\n      break;\n    case 75:\n      player.readyRender(front, 0, 50);\n      player.direction = 'S';\n      break;\n  } \n\n  // updatePossibleMoves();\n}","import { Bomb, liveBombs, liveAttack } from '../bombs/bomb';\nimport { powerUp } from '../powerUps/powerUp';\nimport moveMap from './moveMap';\nimport { shield } from '../powerUps/shield';\nimport { getPlayer1Moves, updatePossibleMoves } from '../util/moveUtil';\nimport { spikes } from '../traps/spikes';\nimport { \n  shieldSound,\n  powerUpSound, \n  spikeSound,\n  evaluateWinner \n} from '../util/gameUtil';\n\nexport default class Player1 {\n  constructor(props) {\n    Object.assign(this, props);\n    this.ctx.drawImage(this.front, this.xPos, this.yPos);\n    window.addEventListener(\"keydown\", e => moveMap(e, this));\n    this.bombSet = false;\n  }\n\n  getPossibleMoves() {\n    this.possibleMoves = getPlayer1Moves(this.xPos, this.yPos);\n  }\n\n  readyRender(image, dX, dY) {\n    const prevX = this.xPos, prevY = this.yPos;\n    this.ctx.fillStyle = '#3B8314';\n    this.ctx.fillRect(this.xPos, this.yPos, 50, 50);\n    this.xPos += dX;\n    this.yPos += dY;\n    this.currentImg = image;\n\n    this.checkFooting(prevX, prevY);\n    this.render();\n  }\n\n  render() {\n    updatePossibleMoves();\n    // this.getPossibleMoves();\n    this.ctx.drawImage(this.currentImg, this.xPos, this.yPos);\n    if (this.shield) this.activateShield();\n  }\n\n  checkFooting(prevX, prevY) {\n    if (powerUp(this.xPos, this.yPos)) {\n      powerUpSound.play();\n      this.bombPower += 1;\n      this.reRender();\n    }\n    if (shield(this.xPos, this.yPos)) {\n      shieldSound.play();\n      this.shield = true;\n      this.reRender();\n    } \n    if (this.bombSet || liveBombs[prevX] && liveBombs[prevX][prevY]) {\n      this.bombRender(prevX, prevY);\n    }\n    if (liveAttack[this.xPos] && liveAttack[this.xPos][this.yPos]) {\n      evaluateWinner(false, true);\n    }\n    \n    if (spikes(this.xPos, this.yPos)) {\n      spikeSound.play();\n      evaluateWinner(false, true);\n    }\n  }\n  \n  activateShield() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.xPos + 25, this.yPos + 25, 25, 0, 2 * Math.PI);\n    this.ctx.fillStyle = \"rgba(220, 220, 255, 0.5)\";\n    this.ctx.fill();\n  }\n\n  deactivateShield() {\n    this.shield = false;\n    this.reRender();\n  }\n\n  bombRender(prevX, prevY) {\n    this.ctx.drawImage(this.bombImg, prevX, prevY);\n    if (prevX !== this.xPos || prevY !== this.yPos) {\n      this.bombSet = false;\n    }\n  }\n\n  reRender() {\n    this.ctx.fillStyle = '#3B8314';\n    this.ctx.fillRect(this.xPos, this.yPos, 50, 50);\n    this.ctx.drawImage(this.currentImg, this.xPos, this.yPos);\n  }\n\n  dropBomb() {\n    const bombProps = {\n      playerId: this.playerId,\n      x: this.xPos,\n      y: this.yPos,\n      bombImg: this.bombImg,\n      bombPower: this.bombPower,\n      ctx: this.ctx,\n      attackImg: this.fire\n    }\n    new Bomb(bombProps);\n    this.ctx.drawImage(this.currentImg, this.xPos, this.yPos);\n    this.bombSet = true;\n    updatePossibleMoves();\n  }  \n}","import { Bomb, liveBombs, liveAttack } from '../bombs/bomb';\nimport { powerUp } from '../powerUps/powerUp';\nimport moveMap from './moveMap';\nimport { shield } from '../powerUps/shield';\nimport { getPlayer2Moves, updatePossibleMoves } from '../util/moveUtil';\nimport { spikes } from '../traps/spikes';\nimport { \n  shieldSound,\n  powerUpSound, \n  spikeSound,\n  evaluateWinner \n} from '../util/gameUtil';\n\nexport default class Player2 {\n  constructor(props) {\n    Object.assign(this, props);\n    this.ctx.drawImage(this.front, this.xPos, this.yPos);\n    window.addEventListener(\"keydown\", e => moveMap(e, this));\n    this.bombSet = false;\n  }\n\n  getPossibleMoves() {\n    this.possibleMoves = getPlayer2Moves(this.xPos, this.yPos);\n  }\n\n  readyRender(image, dX, dY) {\n    const prevX = this.xPos, prevY = this.yPos;\n    this.ctx.fillStyle = '#3B8314';\n    this.ctx.fillRect(this.xPos, this.yPos, 50, 50);\n    this.xPos += dX;\n    this.yPos += dY;\n    this.currentImg = image;\n\n    this.checkFooting(prevX, prevY);\n    this.render();\n  }\n\n  render() {\n    updatePossibleMoves();\n    this.ctx.drawImage(this.currentImg, this.xPos, this.yPos);\n    if (this.shield) this.activateShield();\n  }\n\n  checkFooting(prevX, prevY) {\n    if (powerUp(this.xPos, this.yPos)) {\n      powerUpSound.play();\n      this.bombPower += 1;\n      this.reRender();\n    }\n    if (shield(this.xPos, this.yPos)) {\n      shieldSound.play();\n      this.shield = true;\n      this.reRender();\n    } \n    if (this.bombSet || liveBombs[prevX] && liveBombs[prevX][prevY]) {\n      this.bombRender(prevX, prevY);\n    }\n    if (liveAttack[this.xPos] && liveAttack[this.xPos][this.yPos]) {\n      evaluateWinner(false, true);\n    }\n    if (spikes(this.xPos, this.yPos)) {\n      spikeSound.play();\n      evaluateWinner(true, false);\n    }\n  }\n\n  activateShield() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.xPos + 25, this.yPos + 25, 25, 0, 2 * Math.PI);\n    this.ctx.fillStyle = \"rgba(220, 220, 255, 0.5)\";\n    this.ctx.fill();\n  }\n\n  deactivateShield() {\n    this.shield = false;\n    this.reRender();\n  }\n\n  bombRender(prevX, prevY) {\n    this.ctx.drawImage(this.bombImg, prevX, prevY);\n    if (prevX !== this.xPos || prevY !== this.yPos) {\n      this.bombSet = false;\n    }\n  }\n\n  reRender() {\n    this.ctx.fillStyle = '#3B8314';\n    this.ctx.fillRect(this.xPos, this.yPos, 50, 50);\n    this.ctx.drawImage(this.currentImg, this.xPos, this.yPos);\n  }\n\n  dropBomb() {\n    const bombProps = {\n      playerId: this.playerId,\n      x: this.xPos,\n      y: this.yPos,\n      bombImg: this.bombImg,\n      bombPower: this.bombPower,\n      ctx: this.ctx,\n      attackImg: this.ice\n    }\n    new Bomb(bombProps);\n    this.ctx.drawImage(this.currentImg, this.xPos, this.yPos);\n    this.bombSet = true;\n    updatePossibleMoves();\n  }  \n}","import { loadSounds, addToggleSound, newTwoPlayerGame, newSinglePlayerGame } from './util/gameUtil';\nimport { loadCharacters } from './util/characterUtil';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const characters = loadCharacters();\n  loadSounds();\n  \n  if (window.innerWidth < 1200) {\n    alert('This game is best enjoyed on a full screen computer screen');\n  }\n \n\n  const singlePlayerBtn = document.querySelector('#single-player');\n  const twoPlayerBtn = document.querySelector('#two-player');\n  const startBtn = document.querySelector('#start');\n  const instructions = document.querySelector('#instructions-container');\n  const toggleSound = document.querySelector('#toggle-sound');\n\n  let players, mode;\n  singlePlayerBtn.addEventListener('click', () => {\n    document.querySelector('.selection-section').style.display = 'none';\n    document.querySelector('#character-1').addEventListener('click', () => {\n      players = characters[0];\n      mode = newSinglePlayerGame;\n\n      document.querySelector('#selection-2').style.display = 'none';\n\n    });\n    document.querySelector('#character-2').addEventListener('click', () => {\n      players = characters[1];\n      mode = newSinglePlayerGame;\n\n      document.querySelector('#selection-2').style.display = 'none';\n\n    });\n\n    // document.querySelector\n  });\n\n  twoPlayerBtn.addEventListener('click', () => {\n    document.querySelector('.selection-section').style.display = 'none';\n    players = characters;\n\n    mode = newTwoPlayerGame;\n    document.querySelector('#selection-2').style.display = 'none';\n  });\n\n  startBtn.addEventListener('click', () => {\n    document.querySelector('#instruction-section').style.display = 'none';\n    startBtn.style.display = 'none';\n    instructions.style.visibility = 'hidden';\n    toggleSound.style.display = 'block';\n    // let the games begin.\n    addToggleSound();\n    // newGame(characters);\n    mode(players);\n    // newGame(characters, true);\n  })\n});","import { breakableWalls, removeWall } from '../util/wallUtil';\n\nlet powerUpPos = {};\n\nexport const addPowerUp = () => {\n\n  let i = 0;\n  while(i < 4) {\n    const xWalls = Object.keys(breakableWalls);\n    const x = xWalls[Math.floor(Math.random() * xWalls.length)];\n    const yWalls = Object.keys(breakableWalls[x]);\n    const y = yWalls[Math.floor(Math.random() * yWalls.length)];\n    if (!powerUpPos[x]) {\n      powerUpPos[x] = y;\n      i++;\n    }\n  }\n\n  console.log(powerUpPos)\n};\n\nexport const renderPowerUp = (x, y) => {\n  const canvas = document.querySelector('#green-backdrop');\n  const ctx = canvas.getContext('2d');\n  const powerUp = new Image();\n  powerUp.src = 'public/gameImages/powerUps/powerUp.png';\n\n  powerUp.addEventListener('load', () => {\n    ctx.fillRect(x, y, 50, 50);\n    ctx.fillStyle = '#3B8314';\n    removeWall(x, y);\n\n    ctx.drawImage(powerUp, x, y);\n  });\n}\n\nexport const powerUp = (x, y) => {\n  if (powerUpPos[x] == y) {\n    clearPowerUp(x, y);\n    return true;\n  }\n\n  return false;\n};\n\nexport const clearPowerUp = (x, y) => {\n  delete powerUpPos[x];\n};\n\nexport { powerUpPos };","import { breakableWalls, removeWall } from '../util/wallUtil';\n\nlet shieldPos = {};\n\nexport const addShield = () => {\n\n  let i = 0;\n  while(i < 2) {\n    const xWalls = Object.keys(breakableWalls);\n    const x = xWalls[Math.floor(Math.random() * xWalls.length)];\n    const yWalls = Object.keys(breakableWalls[x]);\n    const y = yWalls[Math.floor(Math.random() * yWalls.length)];\n    if (!shieldPos[x]) {\n      shieldPos[x] = y;\n      i++;\n    }\n  }\n};\n\nexport const renderShield = (x, y) => {\n  const canvas = document.querySelector('#green-backdrop');\n  const ctx = canvas.getContext('2d');\n  const shield = new Image();\n  shield.src = 'public/gameImages/powerUps/shield.png';\n\n  shield.addEventListener('load', () => {\n    ctx.fillRect(x, y, 50, 50);\n    ctx.fillStyle = '#3B8314';\n    removeWall(x, y);\n\n    ctx.drawImage(shield, x, y);\n  });\n}\n\nexport const shield = (x, y) => {\n  if (shieldPos[x] == y) {\n    clearShield(x, y);\n    return true;\n  }\n\n  return false;\n};\n\nexport const clearShield = (x, y) => {\n  delete shieldPos[x];\n};\n\nexport { shieldPos };","export default class Sound {\n  constructor(src) {\n    this.sound = document.createElement(\"audio\");\n    this.sound.src = src;\n    this.sound.setAttribute(\"preload\", \"auto\");\n    this.sound.setAttribute(\"controls\", \"none\");\n    this.sound.style.display = \"none\";\n    document.body.appendChild(this.sound);\n    this.sound.volume = 0.025;\n    this.on = true;\n  }\n\n  play() {\n    this.sound.play();\n  }\n\n  stop() {\n    this.sound.pause();\n  }\n\n  raiseVolume() {\n    this.sound.volume = 0.1;\n  }\n}","import { breakableWalls, removeWall } from '../util/wallUtil';\n\nlet spikePos = {};\n\nexport const addSpikes = () => {\n\n  let i = 0;\n  while(i < 4) {\n    const xWalls = Object.keys(breakableWalls);\n    const x = xWalls[Math.floor(Math.random() * xWalls.length)];\n    const yWalls = Object.keys(breakableWalls[x]);\n    const y = yWalls[Math.floor(Math.random() * yWalls.length)];\n    if (!spikePos[x] && doesNotBlockPlayerSpawn(x, y)) {\n      spikePos[x] = y;\n      i++;\n    }\n  }\n};\n\nconst doesNotBlockPlayerSpawn = (x, y) => {\n  return (\n    (x <= 200 && y <= 300) ||\n    (x >= 500 && y >= 200) ?\n    false : true\n  );\n};\n\nexport const renderSpikes = (x, y) => {\n  const canvas = document.querySelector('#green-backdrop');\n  const ctx = canvas.getContext('2d');\n  const spikes = new Image();\n  spikes.src = 'public/gameImages/traps/spikes.png';\n\n  spikes.addEventListener('load', () => {\n    ctx.fillRect(x, y, 50, 50);\n    ctx.fillStyle = '#3B8314';\n    removeWall(x, y);\n\n    ctx.drawImage(spikes, x, y);\n  });\n}\n\nexport const spikes = (x, y) => {\n  return spikePos[x] == y ? true : false;\n};\n\nexport { spikePos };","export const loadCharacters = () => {\n  const canvas = document.querySelector('#green-backdrop');\n  const ctx = canvas.getContext('2d');\n  const player1State = player1(ctx);\n  const player2State = player2(ctx);\n\n  return [player1State, player2State];\n}\n\nconst player1front = new Image();\nconst player1back = new Image();\nconst player1lSide = new Image();\nconst player1rSide = new Image();\nconst bombImg = new Image();\nconst fire = new Image();\nfire.src = 'public/gameImages/bombs/fire.png';\nbombImg.src = 'public/gameImages/bombs/bomb.png';\nplayer1front.src = 'public/gameImages/characters/player1front.png';\nplayer1back.src = 'public/gameImages/characters/player1back.png';\nplayer1lSide.src = 'public/gameImages/characters/player1lSide.png';\nplayer1rSide.src = 'public/gameImages/characters/player1rSide.png';\n\nconst player1 = ctx => ({\n  id: 1,\n  xPos: 50,\n  yPos: 50,\n  bombPower: 1,\n  fire,\n  bombImg,\n  front: player1front,\n  back: player1back,\n  left: player1lSide,\n  right: player1rSide,\n  currentImg: player1front,\n  direction: 'S',\n  ctx,\n  possibleMoves: [83, 68]\n});\n\nconst player2front = new Image();\nconst player2back = new Image();\nconst player2lSide = new Image();\nconst player2rSide = new Image();\nconst ice = new Image();\nice.src = 'public/gameImages/bombs/ice.png';\nplayer2front.src = 'public/gameImages/characters/player2front.png';\nplayer2back.src = 'public/gameImages/characters/player2back.png';\nplayer2lSide.src = 'public/gameImages/characters/player2lSide.png';\nplayer2rSide.src = 'public/gameImages/characters/player2rSide.png';\n\nconst player2 = ctx => ({\n  id: 2,\n  xPos: 650,\n  yPos: 450,\n  bombPower: 1,\n  ice,\n  bombImg,\n  front: player2front,\n  back: player2back,\n  left: player2lSide,\n  right: player2rSide,\n  currentImg: player2back,\n  direction: 'N',\n  ctx,\n  possibleMoves: [74, 73]\n});","import Sound from '../sounds/sound';\nimport setupGreenBackdrop from '../board/greenBackdrop';\nimport addStaticWalls from '../walls/staticWalls';\nimport addBreakableWalls from '../walls/breakableWalls';\nimport { addPowerUp } from '../powerUps/powerUp';\nimport { addShield } from '../powerUps/shield';\nimport Player1 from '../characters/player1';\nimport Player2 from '../characters/player2';\nimport { addSpikes } from '../traps/spikes';\n\nlet explosionSound,\n    shieldSound, \n    player1, \n    player2,\n    powerUpSound,\n    spikeSound, \n    gameOverSound,\n    music;\n\nexport const newSinglePlayerGame = playerState => {\n  initialSetup();\n  if (playerState.id === 1) {\n    player1 = new Player1(playerState);\n    player1.singlePlayer = true;\n    player2 = {};\n  } else {\n    player2 = new Player2(playerState);\n    player2.singlePlayer = true;\n    player1 = {};\n  }\n}\n    \n\nexport const newTwoPlayerGame = playerStates => {\n  // const canvas = document.querySelector('#green-backdrop');\n  // const ctx = canvas.getContext('2d');\n  initialSetup();\n\n  // setupGreenBackdrop();\n  // addStaticWalls();\n  // addBreakableWalls();\n  // addPowerUp(ctx);\n  // addShield(ctx);\n  // addSpikes(ctx);\n\n  player1 = new Player1(playerStates[0]);\n  player2 = new Player2(playerStates[1]);\n\n  // music.raiseVolume();\n  // music.play();\n}\n\nconst initialSetup = () => {\n  const canvas = document.querySelector('#green-backdrop');\n  canvas.style.display = \"block\";\n  const ctx = canvas.getContext('2d');\n  setupGreenBackdrop();\n  addStaticWalls();\n  addBreakableWalls();\n  addPowerUp(ctx);\n  addShield(ctx);\n  addSpikes(ctx);\n  music.raiseVolume();\n  music.play();\n}\n\nexport const loadSounds = () => {\n  explosionSound = new Sound('public/gameSounds/explosion.mp3');\n  shieldSound = new Sound('public/gameSounds/shield.mp3');\n  powerUpSound = new Sound('public/gameSounds/powerUp.mp3');\n  spikeSound = new Sound('public/gameSounds/spike.mp3');\n  gameOverSound = new Sound('public/gameSounds/gameOver.mp3');\n  music = new Sound('public/gameSounds/music.mp3');\n}\n\nexport const addToggleSound = () => {\n  const button = document.querySelector('#toggle-sound');\n  button.addEventListener('click', () => {\n    if (music.on) {\n      music.stop()\n      music.on = false;\n    } else {\n      music.play();\n      music.on = true;\n    }\n  });\n}\n\nexport const checkGameOver = (spread ) => {\n  let p1Win = false, p2Win = false, pos;\n\n  for (let i = 0; i < spread.length; i++) {\n    pos = spread[i];\n\n    if (player1.xPos === pos[0] &&\n      player1.yPos === pos[1]) {\n        p2Win = checkShield(player1) ? false : true;\n    }\n    if (player2.xPos === pos[0] &&\n      player2.yPos === pos[1]) {\n        p1Win = checkShield(player2) ? false : true;\n    }\n  }\n\n  evaluateWinner(p1Win, p2Win);\n}\n\nexport const checkTimeTrialEnd = () => {\n  if (player1.singlePlayer) evaluateWinner(true, false);\n}\n\nexport const evaluateWinner = (p1Win, p2Win) => {\n  const billBoard = document.querySelector('.bill-board');\n  const modal = document.querySelector('#modal');\n  let innerText, color, gameOver;\n\n  if (p1Win && p2Win) {\n    innerText = 'TIE!';\n    color = 'white';\n  } else if (p1Win) {\n    innerText = 'FIRE WINS!';\n    color = '#fc8200';\n  } else if (p2Win) {\n    innerText = 'ICE WINS!';\n    color = '#8feafc';\n  } \n\n  gameOver = p1Win || p2Win ? true : false;\n  if (gameOver) {\n    player1.possibleMoves = [];\n    player2.possibleMoves = [];\n    music.stop();\n    gameOverSound.play();\n    billBoard.innerText = innerText;\n    billBoard.style.color = color;\n    billBoard.style.visibility = 'visible';\n    modal.style.display = 'block';\n    setTimeout(() => {\n      billBoard.style.visibility = 'hidden'; \n      window.location.reload();\n    }, 3000);\n  }\n}\n\n\nconst checkShield = player => {\n  if (player.shield) {\n    setTimeout(() => {\n      player.shield = false;\n      player.reRender.call(player)}, 325)\n    return true;\n  }\n  return false;\n}\n\nexport {\n  explosionSound,\n  shieldSound,\n  powerUpSound, \n  music,\n  player1,\n  player2,\n  spikeSound\n};","import { allWallsXToY } from './wallUtil';\nimport { player1, player2 } from '../util/gameUtil';\n\n\nexport const updatePossibleMoves = () => {\n  if (player1) getPlayer1Moves(player1.xPos, player1.yPos);\n  if (player2) getPlayer2Moves(player2.xPos, player2.yPos);\n}\n\nexport const getPlayer1Moves = (x, y) => {\n  const possibleMoves = [65, 87, 68, 83];\n  let dX = x - 50, dY = y;\n  \n  const checkCollision = (move) => {\n    if ((allWallsXToY[dX] && allWallsXToY[dX][dY]) ||\n      (player2.xPos === dX && player2.yPos === dY)) {\n      possibleMoves.splice(possibleMoves.indexOf(move), 1);\n    }\n  }\n\n  checkCollision(65);\n  dX += 50;\n  dY -= 50;\n  checkCollision(87);\n  dX += 50;\n  dY += 50;\n  checkCollision(68);\n  dX -= 50;\n  dY += 50;\n  checkCollision(83);\n  player1.possibleMoves = possibleMoves;\n}\n\nexport const getPlayer2Moves = (x, y) => {\n  const possibleMoves = [74, 73, 76, 75];\n  let dX = x - 50, dY = y;\n  \n  const checkCollision = (move) => {\n    if ((allWallsXToY[dX] && allWallsXToY[dX][dY]) ||\n      (player1 && player1.xPos === dX && player1.yPos === dY)) {\n      possibleMoves.splice(possibleMoves.indexOf(move), 1);\n    }\n  }\n\n  checkCollision(74);\n  dX += 50;\n  dY -= 50;\n  checkCollision(73);\n  dX += 50;\n  dY += 50;\n  checkCollision(76);\n  dX -= 50;\n  dY += 50;\n  checkCollision(75);\n  player2.possibleMoves = possibleMoves;\n}","import { checkTimeTrialEnd } from '../util/gameUtil';\n\nconst allWallsXToY = {}, \n      breakableWalls = {}, \n      staticWalls = {};\nlet remainingBreakableWalls = 30;\n\n\nconst addToAllWalls = (pos) => {\n  let [x, y] = pos;\n  allWallsXToY[x] ? \n  allWallsXToY[x][y] = true :\n  allWallsXToY[x] = { [y]: true };\n\n  return pos;\n}\n  \nconst addToBreakableWalls = pos => {\n  let [x, y] = pos;\n  breakableWalls[x] ? \n  breakableWalls[x][y] = true :\n  breakableWalls[x] = { [y]: true };\n\n  return addToAllWalls(pos);\n}\n\nconst addToStaticWalls = pos => {\n  let [x, y] = pos;\n  staticWalls[x] ? \n  staticWalls[x][y] = true :\n  staticWalls[x] = { [y]: true };\n\n  return addToAllWalls(pos);\n}\n\nexport const getHorizontalOuterWallPos = () => {\n  let y = 0, x;\n  return [...Array(36)].map((_, i) => {\n    if (i > 15) {\n      x = (i % 21) * 50;\n      y = 500;\n    } else {\n      x = i * 50;\n    }\n \n    return addToStaticWalls([x, y]);\n  });\n};\n\nexport const getVerticalOuterWallPos = () => {\n  let x = 0, y;\n  return [...Array(18)].map((_, i) => {\n    if (i > 8) {\n      x = 700;\n      y = (i % 9) * 50 + 50;\n    } else {\n      y = i * 50 + 50;\n    }\n\n    return addToStaticWalls([x, y]);\n  });\n};\n\nexport const getInnerWallPos = () => {\n  let y = 100, x, divisor = 6;\n  return [...Array(24)].map((_, i) => {\n    if (i % 7 === divisor) {\n      divisor--;\n      y += 100;\n    } \n    x = (i % 6) * 100 + 100;\n    \n    return addToStaticWalls([x, y]);\n  });\n};\n\nexport const getRandomBreakableWallPos = () => {\n  const allAvailablePos = getAllAvailablePos();\n  let breakableWallPos = [];\n  let i;\n  while (breakableWallPos.length < 30) {\n    i = Math.floor(Math.random() * allAvailablePos.length);\n    const randomPos = (allAvailablePos.splice(i, 1))[0];\n    breakableWallPos.push(addToBreakableWalls(randomPos));\n  }\n  return breakableWallPos;\n}\n\nconst Y_POS1 = [150, 200, 250, 300, 350, 400, 450];\nconst Y_POS2 = [150, 250, 350, 450];\nconst Y_POS3 = [50, 150, 250, 350];\nconst Y_POS4 = [50, 100, 150, 200, 250, 350, 400];\nconst Y_POS5 = [50, 100, 150, 200, 250, 300, 350, 400, 450];\nconst Y_POS6 = [50, 150, 250, 350, 450];\nconst X_POS = [\n  50, 100, 150, 200, 250, 300, 350, \n  400, 450, 500, 550, 600, 650\n];\nexport const getAllAvailablePos = () => {\n  const availablePos = [];\n\n  for (let i = 0; i < X_POS.length; i++) {\n    if (i < 1) {\n      availablePos.push(...zipXtoY(Y_POS1, X_POS[i]));\n    } else if (i < 2) {\n      availablePos.push(...zipXtoY(Y_POS2, X_POS[i]));\n    } else if (i > 10) {\n      availablePos.push(...zipXtoY(Y_POS3, X_POS[i]));\n    } else if (i > 11) {\n      availablePos.push(...zipXtoY(Y_POS4, X_POS[i]));\n    } else if (i % 2 === 0) {\n      availablePos.push(...zipXtoY(Y_POS5, X_POS[i]));\n    } else {\n      availablePos.push(...zipXtoY(Y_POS6, X_POS[i]));\n    }\n  }\n\n  return availablePos;\n};\n\nexport const removeWall = (x, y) => {\n  const wallGroup = [allWallsXToY, breakableWalls];\n\n  for (let i = 0; i < wallGroup.length; i++) {\n    if (wallGroup[i][x] && wallGroup[i][x][y]) {\n      wallGroup[i][x][y] = false;\n      if (i === 1) remainingBreakableWalls--;\n      if (!remainingBreakableWalls) checkTimeTrialEnd();\n    }\n  }\n};\n\nconst zipXtoY = (yPos, x) => {\n  const zipped = []\n  for (let i = 0; i < yPos.length; i++) {\n    zipped.push([x, yPos[i]])\n  }\n\n  return zipped;\n};\n\nexport { \n  allWallsXToY,\n  breakableWalls, \n  staticWalls \n};","import { getRandomBreakableWallPos } from '../util/wallUtil';\n\nexport default () => {\n  const canvas = document.querySelector('#green-backdrop');\n  const ctx = canvas.getContext('2d');\n  const img = new Image();\n  img.src = 'public/gameImages/walls/breakableWall.png';\n  \n  const breakableWallPos = getRandomBreakableWallPos();\n  img.addEventListener('load', () => {\n    let pos;\n    for (let i = 0; i < breakableWallPos.length; i++) {\n      pos = breakableWallPos[i];\n      ctx.drawImage(img, pos[0], pos[1]);\n    }\n  });\n}","import {\n  getHorizontalOuterWallPos,\n  getVerticalOuterWallPos,\n  getInnerWallPos\n} from '../util/wallUtil';\n\nexport default () => {\n  const canvas = document.querySelector('#green-backdrop');\n  const ctx = canvas.getContext('2d');\n  const img = new Image();\n  img.src = 'public/gameImages/walls/wall.png';\n\n  const staticWallPos = getHorizontalOuterWallPos()\n    .concat(getVerticalOuterWallPos())\n    .concat(getInnerWallPos());\n\n  img.addEventListener('load', () => {\n    let pos;\n    for (let i = 0; i < staticWallPos.length; i++) {\n      pos = staticWallPos[i];\n      ctx.drawImage(img, pos[0], pos[1]);\n    }\n  });\n}"],"sourceRoot":""}